import { Gadgets } from 'o1js';
import { Credential } from '../credential-index.ts';
import { EcdsaEthereum } from '../credentials/dynamic-ecdsa.ts';
import { DynamicString } from '../dynamic.ts';

const { Signature, PublicKey, verify } = EcdsaEthereum;

function EcdsaCredential({ maxMessageLength }: { maxMessageLength: number }) {
  const Message = DynamicString({ maxLength: maxMessageLength });
  return Credential.Recursive.fromMethod(
    {
      name: `ecdsa-${maxMessageLength}`,
      publicInput: {
        // this matches the public key type without requiring custom serialization
        signer: { x: { value: Gadgets.Field3 }, y: { value: Gadgets.Field3 } },
      },
      privateInput: { message: Message, signature: Signature },
      data: { message: Message },
    },
    async ({
      publicInput: {
        signer: { x, y },
      },
      privateInput: { message, signature },
    }) => {
      // convert inputs to Secp256k1
      let signer = PublicKey.from({ x: x.value, y: y.value });
      PublicKey.check(signer); // add constraints

      verify(message, signature, signer);
      return { message };
    }
  );
}

// TESTING CODE TO BE REMOVED

let { owner } = await import('../../tests/test-utils.ts');

const EcdsaCred = await EcdsaCredential({ maxMessageLength: 50 });

// message signed using ethers.js
let message = 'Secrets hidden, truth in ZKPs ;)';

// compressed public key generated by ethers.js
let signer = PublicKey.fromEthers(
  '0x020957928494c38660d254dc03ba78f091a4aea0270afb447f193c4daf6648f02b'
);

// ECDSA signature generated by ethers.js
let signature = Signature.fromHex(
  '0x6fada464c3bc2ae127f8c907c0c4bccbd05ba83a584156edb808b7400346b4c9558598d9c7869f5fd75d81128711f6621e4cb5ba2f52a2a51c46c859f49a833a1b'
);

console.time('ecdsa plain');
verify(message, signature, signer);
console.timeEnd('ecdsa plain');

console.time('ecdsa constraints');
let cs = await EcdsaCred.program.analyzeMethods();
console.log(cs.run.summary());
console.timeEnd('ecdsa constraints');

console.time('ecdsa compile');
let vk = await EcdsaCred.compile({ proofsEnabled: false });
console.timeEnd('ecdsa compile');

console.time('ecdsa dummy');
let credDummy = await EcdsaCred.dummy({
  owner,
  data: { message },
});
console.timeEnd('ecdsa dummy');

console.time('ecdsa create');
let cred = await EcdsaCred.create({
  owner,
  publicInput: { signer },
  privateInput: { message, signature },
});
console.timeEnd('ecdsa create');

// console.log(Credential.toJSON(cred));
